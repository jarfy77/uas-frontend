{"ast":null,"code":"// import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n// import axios from \"axios\";\n// const initialState = {\n//   user: null,\n//   isError: false,\n//   isSuccess: false,\n//   isLoading: false,\n//   message: \"\",\n// };\n// export const LoginUser = createAsyncThunk(\n//   \"user/LoginUser\",\n//   async (user, thunkAPI) => {\n//     try {\n//       const response = await axios.post(\"http://localhost:5000/login\", {\n//         email: user.email,\n//         password: user.password,\n//       });\n//       return response.data;\n//     } catch (error) {\n//       if (error.response) {\n//         const message = error.response.data.msg;\n//         return thunkAPI.rejectWithValue(message);\n//       }\n//     }\n//   }\n// );\n// export const getMe = createAsyncThunk(\"user/getMe\", async (_, thunkAPI) => {\n//   try {\n//     const response = await axios.get(\"http://localhost:5000/me\");\n//     return response.data;\n//   } catch (error) {\n//     if (error.response) {\n//       const message = error.response.data.msg;\n//       return thunkAPI.rejectWithValue(message);\n//     }\n//   }\n// });\n// export const LogOut = createAsyncThunk(\"user/LogOut\", async () => {\n//   await axios.delete(\"http://localhost:5000/logout\");\n// });\n// export const authSlice = createSlice({\n//   name: \"auth\",\n//   initialState,\n//   reducers: {\n//     reset: (state) => initialState,\n//   },\n//   extraReducers: (builder) => {\n//     builder.addCase(LoginUser.pending, (state) => {\n//       state.isLoading = true;\n//     });\n//     builder.addCase(LoginUser.fulfilled, (state, action) => {\n//       state.isLoading = false;\n//       state.isSuccess = true;\n//       state.user = action.payload;\n//     });\n//     builder.addCase(LoginUser.rejected, (state, action) => {\n//       state.isLoading = false;\n//       state.isError = true;\n//       state.message = action.payload;\n//     });\n//     builder.addCase(getMe.pending, (state) => {\n//       state.isLoading = true;\n//     });\n//     builder.addCase(getMe.fulfilled, (state, action) => {\n//       state.isLoading = false;\n//       state.isSuccess = true;\n//       state.user = action.payload;\n//     });\n//     builder.addCase(getMe.rejected, (state, action) => {\n//       state.isLoading = false;\n//       state.isError = true;\n//       state.message = action.payload;\n//     });\n//   },\n// });\n// export const { reset } = authSlice.actions;\n// export default authSlice.reducer;","map":{"version":3,"names":[],"sources":["C:/Users/user/OneDrive/Documents/ALL PROJECT/UAS-final/Login-Multi-Role-Frontend/src/features/authSlice.js"],"sourcesContent":["// import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n// import axios from \"axios\";\r\n\r\n// const initialState = {\r\n//   user: null,\r\n//   isError: false,\r\n//   isSuccess: false,\r\n//   isLoading: false,\r\n//   message: \"\",\r\n// };\r\n\r\n// export const LoginUser = createAsyncThunk(\r\n//   \"user/LoginUser\",\r\n//   async (user, thunkAPI) => {\r\n//     try {\r\n//       const response = await axios.post(\"http://localhost:5000/login\", {\r\n//         email: user.email,\r\n//         password: user.password,\r\n//       });\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       if (error.response) {\r\n//         const message = error.response.data.msg;\r\n//         return thunkAPI.rejectWithValue(message);\r\n//       }\r\n//     }\r\n//   }\r\n// );\r\n\r\n// export const getMe = createAsyncThunk(\"user/getMe\", async (_, thunkAPI) => {\r\n//   try {\r\n//     const response = await axios.get(\"http://localhost:5000/me\");\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     if (error.response) {\r\n//       const message = error.response.data.msg;\r\n//       return thunkAPI.rejectWithValue(message);\r\n//     }\r\n//   }\r\n// });\r\n\r\n// export const LogOut = createAsyncThunk(\"user/LogOut\", async () => {\r\n//   await axios.delete(\"http://localhost:5000/logout\");\r\n// });\r\n\r\n// export const authSlice = createSlice({\r\n//   name: \"auth\",\r\n//   initialState,\r\n//   reducers: {\r\n//     reset: (state) => initialState,\r\n//   },\r\n//   extraReducers: (builder) => {\r\n//     builder.addCase(LoginUser.pending, (state) => {\r\n//       state.isLoading = true;\r\n//     });\r\n//     builder.addCase(LoginUser.fulfilled, (state, action) => {\r\n//       state.isLoading = false;\r\n//       state.isSuccess = true;\r\n//       state.user = action.payload;\r\n//     });\r\n//     builder.addCase(LoginUser.rejected, (state, action) => {\r\n//       state.isLoading = false;\r\n//       state.isError = true;\r\n//       state.message = action.payload;\r\n//     });\r\n\r\n//     builder.addCase(getMe.pending, (state) => {\r\n//       state.isLoading = true;\r\n//     });\r\n//     builder.addCase(getMe.fulfilled, (state, action) => {\r\n//       state.isLoading = false;\r\n//       state.isSuccess = true;\r\n//       state.user = action.payload;\r\n//     });\r\n//     builder.addCase(getMe.rejected, (state, action) => {\r\n//       state.isLoading = false;\r\n//       state.isError = true;\r\n//       state.message = action.payload;\r\n//     });\r\n//   },\r\n// });\r\n\r\n// export const { reset } = authSlice.actions;\r\n// export default authSlice.reducer;\r\n"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA"},"metadata":{},"sourceType":"module"}